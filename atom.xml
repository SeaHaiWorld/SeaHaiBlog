<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SeaHai&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/b2190b2dfc2b747ceed30eb781bc22ec</icon>
  <subtitle>面朝大海，春暖花开</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shen-yu.gitee.io/"/>
  <updated>2020-02-10T14:30:55.729Z</updated>
  <id>https://shen-yu.gitee.io/</id>
  
  <author>
    <name>SeaHai</name>
    <email>790041427@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebStorm 添加右键菜单</title>
    <link href="https://shen-yu.gitee.io/2020/ck6gj6oh4000mgkvccdydb8j3/"/>
    <id>https://shen-yu.gitee.io/2020/ck6gj6oh4000mgkvccdydb8j3/</id>
    <published>2020-02-08T16:00:00.000Z</published>
    <updated>2020-02-10T14:30:55.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="打开-Windows-注册器"><a href="#打开-Windows-注册器" class="headerlink" title="打开 Windows 注册器"></a>打开 Windows 注册器</h3><p><code>Windows + R</code> 打开运行  =&gt;  输入 <code>regedit</code>  =&gt; 确定</p><h3 id="添加-WebStorm-右键打开文件"><a href="#添加-WebStorm-右键打开文件" class="headerlink" title="添加 WebStorm 右键打开文件"></a>添加 WebStorm 右键打开文件</h3><p>找到 <code>HKEY_CLASSES_ROOT/*/shell</code><br>在 <code>shell</code> 内新建<strong>项</strong>,命名为 <code>Open With WebStorm</code><br>在 <code>Open With WebStorm</code> 项上右键新建字符串值 <code>icon</code><br>在 <code>Open With WebStorm</code> 项内右侧<br>双击默认数值填写右键菜单的名称 <code>Open With WebStorm</code><br>双击 <code>icon</code> 数值填写 <code>Webstorm路径</code><br>如：<code>&quot;E:\WebStorm 2019.3.2\bin\webstorm64.exe&quot;</code><br>在 <code>Open With WebStorm</code> 项下新建 <code>command</code> 项<br>项内默认填写 <code>Webstorm路径 %1</code><br>如：<code>&quot;E:\WebStorm 2019.3.2\bin\webstorm64.exe %1&quot;</code><br>此时右键文件时菜单项会有 <code>Open With WebStorm</code></p><a id="more"></a><h3 id="添加-WebStorm-右键打开文件夹"><a href="#添加-WebStorm-右键打开文件夹" class="headerlink" title="添加 WebStorm 右键打开文件夹"></a>添加 WebStorm 右键打开文件夹</h3><p>找到 <code>HKEY_CLASSES_ROOT/Directory/shell</code><br>在 <code>shell</code> 内新建<strong>项</strong>,命名为 <code>Open Floder With WebStorm</code><br>在 <code>Open Floder With WebStorm</code> 项上右键新建字符串值 <code>icon</code><br>在 <code>Open Floder With WebStorm</code> 项内右侧<br>双击默认数值填写你右键菜单的名称 <code>Open Floder With WebStorm</code><br>双击 <code>icon</code> 数值填写<code>Webstorm路径</code><br>如：<code>&quot;E:\WebStorm 2019.3.2\bin\webstorm64.exe&quot;</code><br>在 <code>Open Floder With WebStorm</code> 项下新建 <code>command</code> 项<br>项内默认填写 <code>Webstorm路径 %1</code><br>如：<code>&quot;E:\WebStorm 2019.3.2\bin\webstorm64.exe %1&quot;</code><br>此时右键文件时菜单项会有 <code>Open Floder With WebStorm</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;打开-Windows-注册器&quot;&gt;&lt;a href=&quot;#打开-Windows-注册器&quot; class=&quot;headerlink&quot; title=&quot;打开 Windows 注册器&quot;&gt;&lt;/a&gt;打开 Windows 注册器&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Windows + R&lt;/code&gt; 打开运行  =&amp;gt;  输入 &lt;code&gt;regedit&lt;/code&gt;  =&amp;gt; 确定&lt;/p&gt;
&lt;h3 id=&quot;添加-WebStorm-右键打开文件&quot;&gt;&lt;a href=&quot;#添加-WebStorm-右键打开文件&quot; class=&quot;headerlink&quot; title=&quot;添加 WebStorm 右键打开文件&quot;&gt;&lt;/a&gt;添加 WebStorm 右键打开文件&lt;/h3&gt;&lt;p&gt;找到 &lt;code&gt;HKEY_CLASSES_ROOT/*/shell&lt;/code&gt;&lt;br&gt;在 &lt;code&gt;shell&lt;/code&gt; 内新建&lt;strong&gt;项&lt;/strong&gt;,命名为 &lt;code&gt;Open With WebStorm&lt;/code&gt;&lt;br&gt;在 &lt;code&gt;Open With WebStorm&lt;/code&gt; 项上右键新建字符串值 &lt;code&gt;icon&lt;/code&gt;&lt;br&gt;在 &lt;code&gt;Open With WebStorm&lt;/code&gt; 项内右侧&lt;br&gt;双击默认数值填写右键菜单的名称 &lt;code&gt;Open With WebStorm&lt;/code&gt;&lt;br&gt;双击 &lt;code&gt;icon&lt;/code&gt; 数值填写 &lt;code&gt;Webstorm路径&lt;/code&gt;&lt;br&gt;如：&lt;code&gt;&amp;quot;E:\WebStorm 2019.3.2\bin\webstorm64.exe&amp;quot;&lt;/code&gt;&lt;br&gt;在 &lt;code&gt;Open With WebStorm&lt;/code&gt; 项下新建 &lt;code&gt;command&lt;/code&gt; 项&lt;br&gt;项内默认填写 &lt;code&gt;Webstorm路径 %1&lt;/code&gt;&lt;br&gt;如：&lt;code&gt;&amp;quot;E:\WebStorm 2019.3.2\bin\webstorm64.exe %1&amp;quot;&lt;/code&gt;&lt;br&gt;此时右键文件时菜单项会有 &lt;code&gt;Open With WebStorm&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件配置" scheme="https://shen-yu.gitee.io/categories/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="WebStorm" scheme="https://shen-yu.gitee.io/tags/WebStorm/"/>
    
      <category term="注册命令" scheme="https://shen-yu.gitee.io/tags/%E6%B3%A8%E5%86%8C%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 配置阿里云源</title>
    <link href="https://shen-yu.gitee.io/2020/ck6gj6ohd000zgkvcbq16hjul/"/>
    <id>https://shen-yu.gitee.io/2020/ck6gj6ohd000zgkvcbq16hjul/</id>
    <published>2020-01-07T16:18:41.000Z</published>
    <updated>2020-02-10T08:52:53.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何换成国内最快的阿里云源"><a href="#如何换成国内最快的阿里云源" class="headerlink" title="如何换成国内最快的阿里云源"></a>如何换成国内最快的阿里云源</h2><h3 id="第一步：备份源文件"><a href="#第一步：备份源文件" class="headerlink" title="第一步：备份源文件"></a>第一步：备份源文件</h3><blockquote><p>cd /etc/apt/  </p></blockquote><p>然后会显示下面的源文件 sources.list<br>输入命令 </p><blockquote><p>sudo cp sources.list sources.list.bak </p></blockquote><p>将 sources.list 备份到 sources.list.bak</p><a id="more"></a><h3 id="第二步：替换源文件"><a href="#第二步：替换源文件" class="headerlink" title="第二步：替换源文件"></a>第二步：替换源文件</h3><p>阿里云源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial main restricted universe multiverse  </span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security main restricted universe multiverse  </span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates main restricted universe multiverse  </span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-backports main restricted universe multiverse  </span><br><span class="line">##测试版源  </span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-proposed main restricted universe multiverse  </span><br><span class="line"># 源码  </span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial main restricted universe multiverse  </span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security main restricted universe multiverse  </span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates main restricted universe multiverse  </span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-backports main restricted universe multiverse  </span><br><span class="line">##测试版源  </span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-proposed main restricted universe multiverse  </span><br><span class="line"># Canonical 合作伙伴和附加  </span><br><span class="line">deb http:&#x2F;&#x2F;archive.canonical.com&#x2F;ubuntu&#x2F; xenial partner  </span><br><span class="line">deb http:&#x2F;&#x2F;extras.ubuntu.com&#x2F;ubuntu&#x2F; xenial main</span><br></pre></td></tr></table></figure><p>替换并保存 </p><blockquote><p>sudo vim sources.list</p></blockquote><p>修改文件，替换成阿里云源即可</p><h3 id="第三步：更新源和软件"><a href="#第三步：更新源和软件" class="headerlink" title="第三步：更新源和软件"></a>第三步：更新源和软件</h3><blockquote><p>sudo apt-get update 更新源  </p></blockquote><blockquote><p>sudo apt-get upgrade 更新软件</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何换成国内最快的阿里云源&quot;&gt;&lt;a href=&quot;#如何换成国内最快的阿里云源&quot; class=&quot;headerlink&quot; title=&quot;如何换成国内最快的阿里云源&quot;&gt;&lt;/a&gt;如何换成国内最快的阿里云源&lt;/h2&gt;&lt;h3 id=&quot;第一步：备份源文件&quot;&gt;&lt;a href=&quot;#第一步：备份源文件&quot; class=&quot;headerlink&quot; title=&quot;第一步：备份源文件&quot;&gt;&lt;/a&gt;第一步：备份源文件&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;cd /etc/apt/  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后会显示下面的源文件 sources.list&lt;br&gt;输入命令 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo cp sources.list sources.list.bak &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将 sources.list 备份到 sources.list.bak&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shen-yu.gitee.io/categories/Ubuntu/"/>
    
    
      <category term="Vim" scheme="https://shen-yu.gitee.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>用 async/await 来处理异步</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6ogi0002gkvcdy6n9a5g/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6ogi0002gkvcdy6n9a5g/</id>
    <published>2019-12-16T12:10:33.000Z</published>
    <updated>2020-02-10T14:31:22.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在通过 jest-puppeteer E2E 测试用例，使用 async/ await 来实现异步操作，以实现模拟用户操作。</p><p>async/await 现在已经被标准化，是时候学习一下了。</p><h3 id="async的用法"><a href="#async的用法" class="headerlink" title="async的用法"></a>async的用法</h3><p>作为一个关键字放到函数前面，用于表示函数是一个异步函数，因为 async就是异步的意思，异步函数也就意味着该函数的执行不会阻塞后面代码的执行。写一个 async 函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">async function timeout() &#123;</span><br><span class="line">    return &#39;hello world&#39;</span><br><span class="line">&#125;</span><br><span class="line">timeout();</span><br><span class="line">console.log(&#39;虽然在后面，但是我先执行&#39;);</span><br></pre></td></tr></table></figure><a id="more"></a><p>打开浏览器控制台，我们可以看到</p><p><img src="https://blogimage-1259219507.cos.ap-chengdu.myqcloud.com/console.png" alt="console.png"></p><h4 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h4><p>async 函数返回的是一个 promise 对象，如果要获取到 promise 返回值，我们应该用 then 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">async function timeout() &#123;</span><br><span class="line">    return &#39;hello world&#39;</span><br><span class="line">&#125;</span><br><span class="line">timeout().then(result &#x3D;&gt; &#123;</span><br><span class="line">console.log(result);</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&#39;虽然在后面，但是我先执行&#39;);</span><br></pre></td></tr></table></figure><p>控制台如下：</p><p><img src="https://blogimage-1259219507.cos.ap-chengdu.myqcloud.com/console1.png" alt="console1.png"></p><p>我们获取到了 hello world ,  同时 timeout 的执行也没有阻塞后面代码的执行，和我们刚才说的一致。</p><h4 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h4><p>如果函数内部抛出错误， promise 对象有一个 catch 方法进行捕获错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timeout(false).catch(err &#x3D;&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="await-的用法"><a href="#await-的用法" class="headerlink" title="await 的用法"></a>await 的用法</h3><p>await是 等待的意思，那么它等待什么呢，它后面跟着什么呢？其实它后面可以放任何表达式，不过我们更多的是放一个返回 promise 对象的表达式。注意 await 关键字只能放到 async 函数里面</p><p>现在写一个函数，让它返回 promise 对象，该函数的作用是2s 之后让数值乘以2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 2s 之后返回双倍的值</span><br><span class="line">    function doubleAfter2seconds(num) &#123;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                resolve(2 * num)</span><br><span class="line">            &#125;, 2000);</span><br><span class="line">        &#125; )</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>现在再写一个 async 函数，从而可以使用 await 关键字， await 后面放置的就是返回 promise 对象的一个表达式，所以它后面可以写上 doubleAfter2seconds 函数的调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">async function testResult() &#123;</span><br><span class="line">    let result &#x3D; await doubleAfter2seconds(30);</span><br><span class="line">    console.log(result);</span><br><span class="line">&#125;</span><br><span class="line">testResult();</span><br></pre></td></tr></table></figure><p>打开控制台，2s 之后，可以看到输出了60。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在通过 jest-puppeteer E2E 测试用例，使用 async/ await 来实现异步操作，以实现模拟用户操作。&lt;/p&gt;
&lt;p&gt;async/await 现在已经被标准化，是时候学习一下了。&lt;/p&gt;
&lt;h3 id=&quot;async的用法&quot;&gt;&lt;a href=&quot;#async的用法&quot; class=&quot;headerlink&quot; title=&quot;async的用法&quot;&gt;&lt;/a&gt;async的用法&lt;/h3&gt;&lt;p&gt;作为一个关键字放到函数前面，用于表示函数是一个异步函数，因为 async就是异步的意思，异步函数也就意味着该函数的执行不会阻塞后面代码的执行。写一个 async 函数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;async function timeout() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timeout();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(&amp;#39;虽然在后面，但是我先执行&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="https://shen-yu.gitee.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://shen-yu.gitee.io/tags/nodejs/"/>
    
      <category term="异步" scheme="https://shen-yu.gitee.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>JS中几种常见的遍历</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6ogt0007gkvcdwv6dy81/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6ogt0007gkvcdwv6dy81/</id>
    <published>2019-11-25T16:00:00.000Z</published>
    <updated>2020-02-10T08:55:29.945Z</updated>
    
    <content type="html"><![CDATA[<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>按照数组或对象中的顺序对当前的元素做一些什么，具体做什么，随便</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr[ ].forEach((item, index, array) &#x3D;&gt; &#123;</span><br><span class="line">     &#x2F;&#x2F; foreach不支持在循环时添加删除操作</span><br><span class="line">     &#x2F;&#x2F; 随便做什么</span><br><span class="line">     &#x2F;&#x2F; item：当前项，index：当前项的索引， array：原始数组</span><br><span class="line">     &#x2F;&#x2F; 匿名函数中的this 都是指向Window</span><br><span class="line">     &#x2F;&#x2F; 可以没有返回</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var ary &#x3D; [1,2,3,4,5];</span><br><span class="line">var res &#x3D; ary.forEach((item, index, arr) &#x3D;&gt; &#123;</span><br><span class="line">    arr[index] &#x3D; item * 10;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>console.log(res) –&gt; undefined</p></blockquote><blockquote><p>console.log(ary) –&gt; Array (5) [10, 20, 30, 40, 50]</p></blockquote><a id="more"></a><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>即过滤器。</p><p>例如将数组中大于10的元素放到一个新的数组中，即将数组中的每一项和10做比较，大于10的项放到一个新的数组中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var temp &#x3D; [0, 5, 10, 20, 30].filter((item, index) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(item); &#x2F;&#x2F; 数组中的每一项</span><br><span class="line">    console.log(index); &#x2F;&#x2F; 每一项的索引</span><br><span class="line">    return item &gt; 10 &#x2F;&#x2F; 返回大于10的项</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>console.log(temp) –&gt; Array (2) [20, 30]</p></blockquote><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>即克隆。</p><p>将原始数组中每一项克隆，放到一个新的数组中，结束时，得到一个新的数组，原始数组不变，新数组中的顺序和原始数组中一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr[ ].map((item, index, array) &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 针对每一项做点什么</span><br><span class="line">    &#x2F;&#x2F; item：当前项，index：当前项的索引， array：原始数组</span><br><span class="line">    &#x2F;&#x2F; 可以返回一个对象，用于数组元素转对象</span><br><span class="line">    return XXX &#x2F;&#x2F; 返回操作后的新项</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr2 &#x3D; [1,2,3,4,5]</span><br><span class="line">var res2 &#x3D; arr2.map((item, index, array) &#x3D;&gt; &#123;</span><br><span class="line">    return item * 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>console.log(res2) –&gt; Array (5) [100, 200, 300, 400, 500] // 原数组拷贝了一份，并进行了修改</p></blockquote><blockquote><p>console.log(arr2) –&gt; Array (5) [1, 2, 3, 4, 5] // 原数组并未发生变化</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 数组元素转对象</span><br><span class="line">var arr3 &#x3D; [1,2,3,4,5]</span><br><span class="line">var obj &#x3D; arr3.map((item) &#x3D;&gt; (&#123;</span><br><span class="line">        key: item,</span><br><span class="line">        value: item,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><blockquote><p>console.log(obj) –&gt; Array (5) [{key: 1}, {key: 2}, {key: 3}, {key: 4}, {key: 5}]</p></blockquote><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h3><p>返回对象中每一项的key的数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;&#39;0&#39;:&#39;a&#39;,&#39;1&#39;:&#123;&#39;key&#39;:&#39;1&#39;&#125;,&#39;2&#39;:10,&#39;3&#39;:&#39;xxx&#39;&#125;</span><br><span class="line">   var keysArr &#x3D; Object.keys(obj);</span><br></pre></td></tr></table></figure><blockquote><p>console.log(keysArr); –&gt; Array (4) [‘0’, ‘1’, ‘2’, ‘3’]</p></blockquote><p>结合forEach消除空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">removeBlankSpace &#x3D; obj &#x3D;&gt; Object.keys(values)</span><br><span class="line">   .forEach((key) &#x3D;&gt; &#123;</span><br><span class="line">      values[key] &#x3D; values[key].trim()</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>结合map获取对象的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getValue &#x3D; obj &#x3D;&gt;</span><br><span class="line">   Object.keys(obj)</span><br><span class="line">      .map(key &#x3D;&gt; obj[key])</span><br><span class="line">         .join(&#39;,&#39;)</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>累加器。</p><p>从数组中第一项开始，每检查一项，就和前面的总和加在一起，加到最后返回总和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var temp &#x3D; [1, 2, 3, 4 ,5]</span><br><span class="line">.reduce((accumulator, current, index, array) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(accumulator) &#x2F;&#x2F; 累加器</span><br><span class="line">    console.log(currentValue) &#x2F;&#x2F; 当前值</span><br><span class="line">    console.log(currentIndex) &#x2F;&#x2F; 当前项的索引</span><br><span class="line">    console.log(array) &#x2F;&#x2F; 原始数组</span><br><span class="line">    return accumulator + currentValue; &#x2F;&#x2F; 返回所有项的总和</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>console.log(temp) –&gt; Number 15</p></blockquote><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>ES6 中新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set本身是一个构造函数，用来生成 Set 数据结构。可通过 add() 方法向 Set 结构加入成员， Set 结构不会添加重复的值，通过 Array.from 方法将 Set 结构转为数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const array &#x3D; [1, 1, 2, 2, 3];</span><br><span class="line">function removeDedupe(array) &#123;</span><br><span class="line">  const set &#x3D; new Set(array)</span><br><span class="line">  return Array.from(set);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>console.log(set) –&gt; Set (3) [1, 2, 3]</p></blockquote><blockquote><p>console.log(array) –&gt; Array (3) [1, 2, 3]</p></blockquote><p>Set数据结构类似于数组，但成员的值都是唯一的，没有重复的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let set &#x3D; new Set();</span><br><span class="line">set.add(&#123;&#125;);</span><br><span class="line">set.size &#x2F;&#x2F; 1</span><br><span class="line">set.add(&#123;&#125;);</span><br><span class="line">set.size &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure><p>Set数据结构中，两个对象总视为不相等的（即使为空）</p><h4 id="Set-结构的实例操作方法"><a href="#Set-结构的实例操作方法" class="headerlink" title="Set 结构的实例操作方法"></a>Set 结构的实例操作方法</h4><blockquote><p>Set.prototype.add(value)：添加某个值，返回 Set 结构本身。</p></blockquote><blockquote><p>Set.prototype.delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</p></blockquote><blockquote><p>Set.prototype.has(value)：返回一个布尔值，表示该值是否为Set的成员。</p></blockquote><blockquote><p>Set.prototype.clear()：清除所有成员，没有返回值。</p></blockquote><h4 id="Set-结构的实例遍历方法"><a href="#Set-结构的实例遍历方法" class="headerlink" title="Set 结构的实例遍历方法"></a>Set 结构的实例遍历方法</h4><blockquote><p>Set.prototype.keys()：返回键名的遍历器</p></blockquote><blockquote><p>Set.prototype.values()：返回键值的遍历器</p></blockquote><blockquote><p>Set.prototype.entries()：返回键值对的遍历器</p></blockquote><blockquote><p>Set.prototype.forEach()：使用回调函数遍历每个成员</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;forEach&quot;&gt;&lt;a href=&quot;#forEach&quot; class=&quot;headerlink&quot; title=&quot;forEach&quot;&gt;&lt;/a&gt;forEach&lt;/h3&gt;&lt;p&gt;按照数组或对象中的顺序对当前的元素做一些什么，具体做什么，随便&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;arr[ ].forEach((item, index, array) &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#x2F;&amp;#x2F; foreach不支持在循环时添加删除操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#x2F;&amp;#x2F; 随便做什么&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#x2F;&amp;#x2F; item：当前项，index：当前项的索引， array：原始数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#x2F;&amp;#x2F; 匿名函数中的this 都是指向Window&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#x2F;&amp;#x2F; 可以没有返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var ary &amp;#x3D; [1,2,3,4,5];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var res &amp;#x3D; ary.forEach((item, index, arr) &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arr[index] &amp;#x3D; item * 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;console.log(res) –&amp;gt; undefined&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;console.log(ary) –&amp;gt; Array (5) [10, 20, 30, 40, 50]&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://shen-yu.gitee.io/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="https://shen-yu.gitee.io/tags/ES6/"/>
    
      <category term="JavaScript" scheme="https://shen-yu.gitee.io/tags/JavaScript/"/>
    
      <category term="函数遍历" scheme="https://shen-yu.gitee.io/tags/%E5%87%BD%E6%95%B0%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>记录 Taro 的几个 Demo</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6ogz000ggkvc3emv5fcj/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6ogz000ggkvc3emv5fcj/</id>
    <published>2019-11-04T16:25:13.000Z</published>
    <updated>2020-02-07T16:26:59.983Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://taro-docs.jd.com/taro/docs/README.html" target="_blank" rel="noopener">Taro 官方文档</a></p><p><a href="https://taro-ui.jd.com/#/" target="_blank" rel="noopener">Taro UI</a></p><p><a href="https://github.com/zuoge85/taro-dva" target="_blank" rel="noopener">整合 taro-dvajs的仿知乎示例</a></p><p><a href="https://github.com/Jeepeng/taro-icons" target="_blank" rel="noopener">基于 Taro 的小程序图标库</a></p><p><a href="https://github.com/chuyun/taro-plugin-canvas" target="_blank" rel="noopener">基于 Taro 的 canvas 绘图组件，通过配置的方式生成分享图片</a></p><p><a href="https://blog.csdn.net/gwdgwd123/article/details/84726238" target="_blank" rel="noopener">taro框架的缺陷以及注意事项</a></p><p><a href="https://q.qq.com/wiki/develop/miniprogram/frame/" target="_blank" rel="noopener">qq开发者文档</a></p><p><a href="https://github.com/Groundhog-Chen/min-program-demo" target="_blank" rel="noopener">基于 Tarojs 微信小程序 Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://taro-docs.jd.com/taro/docs/README.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Taro 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://taro-ui.jd.
      
    
    </summary>
    
    
      <category term="Taro" scheme="https://shen-yu.gitee.io/categories/Taro/"/>
    
    
      <category term="小程序" scheme="https://shen-yu.gitee.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="Demo" scheme="https://shen-yu.gitee.io/tags/Demo/"/>
    
  </entry>
  
  <entry>
    <title>Thinkjs - 解决跨域问题</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6oh9000ugkvc4abz4ksz/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6oh9000ugkvc4abz4ksz/</id>
    <published>2019-10-04T16:00:00.000Z</published>
    <updated>2020-02-10T14:32:07.607Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>学习 Thinkjs 3.0 ，但是前后台分离，产生了跨域问题</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><img src="https://blogimage-1259219507.cos.ap-chengdu.myqcloud.com/%E8%B7%A8%E5%9F%9F%E4%BE%8B%E5%AD%90.png" alt="Thinkjs"></p><a id="more"></a><p>koa2 的跨域问题可以通过引入koa-cors2来解决</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="安装-kcors"><a href="#安装-kcors" class="headerlink" title="安装 kcors"></a>安装 kcors</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install kcors –save</span><br></pre></td></tr></table></figure><h4 id="引入kcors"><a href="#引入kcors" class="headerlink" title="引入kcors"></a>引入kcors</h4><p>在中间件 middleware.js 中引入 kcors</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const kcors &#x3D; require(&#39;kcors&#39;); &#x2F;&#x2F; 引入kcors</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; [</span><br><span class="line">...</span><br><span class="line">  &#123;</span><br><span class="line">    handle: kcors, &#x2F;&#x2F; 处理跨域</span><br><span class="line">    options: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>kcors-npm 包管理: <a href="https://www.npmjs.com/package/koa-cors" target="_blank" rel="noopener">https://www.npmjs.com/package/koa-cors</a></p><p>Thinkjs 官方文档： <a href="https://thinkjs.org/zh-cn/doc/3.0/index.html" target="_blank" rel="noopener">https://thinkjs.org/zh-cn/doc/3.0/index.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;p&gt;学习 Thinkjs 3.0 ，但是前后台分离，产生了跨域问题&lt;/p&gt;
&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://blogimage-1259219507.cos.ap-chengdu.myqcloud.com/%E8%B7%A8%E5%9F%9F%E4%BE%8B%E5%AD%90.png&quot; alt=&quot;Thinkjs&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://shen-yu.gitee.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Thinkjs" scheme="https://shen-yu.gitee.io/tags/Thinkjs/"/>
    
      <category term="Kors" scheme="https://shen-yu.gitee.io/tags/Kors/"/>
    
  </entry>
  
  <entry>
    <title>Thinkjs - 数据库配置</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6oha000wgkvc9lhn1uvl/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6oha000wgkvc9lhn1uvl/</id>
    <published>2019-09-21T16:00:00.000Z</published>
    <updated>2020-02-10T09:15:12.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置-database-js-文件"><a href="#配置-database-js-文件" class="headerlink" title="配置 database.js 文件"></a>配置 database.js 文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; database.js</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  handle: mysql,</span><br><span class="line">  database: &#39;think&#39;, &#x2F;&#x2F; database_name</span><br><span class="line">  prefix: &#39;think_&#39;, &#x2F;&#x2F; database_table 前缀</span><br><span class="line">  encoding: &#39;utf8mb4&#39;,</span><br><span class="line">  host: &#39;127.0.0.1&#39;, &#x2F;&#x2F; Your MySQL host</span><br><span class="line">  port: &#39;3306&#39;, &#x2F;&#x2F; Your MySQL port</span><br><span class="line">  user: &#39;user&#39;, &#x2F;&#x2F; Your MySQL userName</span><br><span class="line">  password: &#39;password&#39;, &#x2F;&#x2F; Your MySQL password</span><br><span class="line">  dateStrings: true</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="配置-adapter-js-文件"><a href="#配置-adapter-js-文件" class="headerlink" title="配置 adapter.js 文件"></a>配置 adapter.js 文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; adapter.js</span><br><span class="line"></span><br><span class="line">const database &#x3D; require(&#39;.&#x2F;database.js&#39;); &#x2F;&#x2F; 引用database.js</span><br><span class="line">...</span><br><span class="line">exports.model &#x3D; &#123;</span><br><span class="line">  type: &#39;mysql&#39;,</span><br><span class="line">  common: &#123;</span><br><span class="line">  logConnect: isDev,</span><br><span class="line">  logSql: isDev,</span><br><span class="line">  logger: msg &#x3D;&gt; think.logger.info(msg)</span><br><span class="line"> &#125;,</span><br><span class="line"> mysql: database </span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h3 id="或直接在-adapter-js-内配置"><a href="#或直接在-adapter-js-内配置" class="headerlink" title="或直接在 adapter.js 内配置"></a>或直接在 adapter.js 内配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; adapter.js</span><br><span class="line">const mysql &#x3D; require(&#39;think-model-mysql&#39;);</span><br><span class="line">...</span><br><span class="line">exports.model &#x3D; &#123;</span><br><span class="line">  type: &#39;mysql&#39;,</span><br><span class="line">  common: &#123;</span><br><span class="line">  logConnect: isDev,</span><br><span class="line">  logSql: isDev,</span><br><span class="line">  logger: msg &#x3D;&gt; think.logger.info(msg)</span><br><span class="line"> &#125;,</span><br><span class="line"> mysql: &#123;</span><br><span class="line">  handle: mysql,</span><br><span class="line">  database: &#39;think&#39;, &#x2F;&#x2F; database_name</span><br><span class="line">  prefix: &#39;think_&#39;, &#x2F;&#x2F; database_table 前缀</span><br><span class="line">  encoding: &#39;utf8mb4&#39;,</span><br><span class="line">  host: &#39;127.0.0.1&#39;, &#x2F;&#x2F; Your MySQL host</span><br><span class="line">  port: &#39;3306&#39;, &#x2F;&#x2F; Your MySQL port</span><br><span class="line">  user: &#39;user&#39;, &#x2F;&#x2F; Your MySQL userName</span><br><span class="line">  password: &#39;password&#39;, &#x2F;&#x2F; Your MySQL password</span><br><span class="line">  dateStrings: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;配置-database-js-文件&quot;&gt;&lt;a href=&quot;#配置-database-js-文件&quot; class=&quot;headerlink&quot; title=&quot;配置 database.js 文件&quot;&gt;&lt;/a&gt;配置 database.js 文件&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F; database.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;module.exports &amp;#x3D; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  handle: mysql,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  database: &amp;#39;think&amp;#39;, &amp;#x2F;&amp;#x2F; database_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  prefix: &amp;#39;think_&amp;#39;, &amp;#x2F;&amp;#x2F; database_table 前缀&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  encoding: &amp;#39;utf8mb4&amp;#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  host: &amp;#39;127.0.0.1&amp;#39;, &amp;#x2F;&amp;#x2F; Your MySQL host&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  port: &amp;#39;3306&amp;#39;, &amp;#x2F;&amp;#x2F; Your MySQL port&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  user: &amp;#39;user&amp;#39;, &amp;#x2F;&amp;#x2F; Your MySQL userName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  password: &amp;#39;password&amp;#39;, &amp;#x2F;&amp;#x2F; Your MySQL password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dateStrings: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://shen-yu.gitee.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Thinkjs" scheme="https://shen-yu.gitee.io/tags/Thinkjs/"/>
    
      <category term="数据库操作" scheme="https://shen-yu.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    
      <category term="MySQL" scheme="https://shen-yu.gitee.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Navicat 中 csv 文件导入 MySQL</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6oh8000sgkvc8uda6rzp/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6oh8000sgkvc8uda6rzp/</id>
    <published>2019-09-19T16:00:00.000Z</published>
    <updated>2020-02-10T08:57:18.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Navicat-中-csv-、json-文件导入-MySQL"><a href="#Navicat-中-csv-、json-文件导入-MySQL" class="headerlink" title="Navicat 中 csv 、json 文件导入 MySQL"></a>Navicat 中 csv 、json 文件导入 MySQL</h2><ul><li>主要问题:<br>  解决乱码、导入 sql、csv、json 文件</li><li>借助工具：<br>  Navicat、Notopad、MySQL</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Navicat-中-csv-、json-文件导入-MySQL&quot;&gt;&lt;a href=&quot;#Navicat-中-csv-、json-文件导入-MySQL&quot; class=&quot;headerlink&quot; title=&quot;Navicat 中 csv 、json 文件导入 MySQL&quot;&gt;
      
    
    </summary>
    
    
      <category term="数据库操作" scheme="https://shen-yu.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="Navicat" scheme="https://shen-yu.gitee.io/tags/Navicat/"/>
    
      <category term="Mysql" scheme="https://shen-yu.gitee.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Thinkjs - CRUD 操作</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6oh5000ogkvc14mkd8h0/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6oh5000ogkvc14mkd8h0/</id>
    <published>2019-09-15T16:00:00.000Z</published>
    <updated>2020-02-10T08:59:01.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p><strong>添加单条数据</strong><br>使用 add 方法可以添加一条数据，返回值为插入数据的 id。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">async addAction()&#123;</span><br><span class="line">  const model &#x3D; this.model(&#39;user&#39;);</span><br><span class="line">  const id &#x3D; await model.add(&#123;name: &#39;xxx&#39;, id: &#39;yyy&#39;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加多条数据"><a href="#添加多条数据" class="headerlink" title="添加多条数据"></a><strong>添加多条数据</strong></h4><p>使用 addMany 方法可以添加多条数据，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">async addAction()&#123;</span><br><span class="line">  const model &#x3D; this.model(&#39;user&#39;);</span><br><span class="line">  const insertId &#x3D; await model.addMany(</span><br><span class="line">   [</span><br><span class="line">     &#123;name: &#39;xxx1&#39;, pwd: &#39;yyy1&#39;&#125;,</span><br><span class="line">     &#123;name: &#39;xxx2&#39;, pwd: &#39;yyy2&#39;&#125;</span><br><span class="line">   ]</span><br><span class="line"> )&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：addMany添加多条数据时应该插入一个数组</p></blockquote><a id="more"></a><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>使用 delete 方法来删除数据。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">async deleteAction()&#123;</span><br><span class="line">  let model &#x3D; this.model(&#39;user&#39;);</span><br><span class="line">  let affectedRows &#x3D; await model.where(&#123;id: [&#39;&gt;&#39;, 100]&#125;).delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p>使用 update 方法来更新数据。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; class extends think.Controller &#123;</span><br><span class="line">  async updateAction()&#123;</span><br><span class="line">    let model &#x3D; this.model(&#39;user&#39;);</span><br><span class="line">    let affectedRows &#x3D; await model.where(&#123;name: &#39;thinkjs&#39;&#125;).update(&#123;email: &#39;admin@thinkjs.org&#39;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><h4 id="查询单条数据"><a href="#查询单条数据" class="headerlink" title="查询单条数据"></a><strong>查询单条数据</strong></h4><p>使用 find 方法查询单条数据，返回值为对象。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">async listAction()&#123;</span><br><span class="line">  const model &#x3D; this.model(&#39;user&#39;);</span><br><span class="line">  const data &#x3D; await model.where(&#123;name: &#39;thinkjs&#39;&#125;).find();</span><br><span class="line">  &#x2F;&#x2F; data will returns &#123;name: &#39;thinkjs&#39;, email: &#39;admin@thinkjs.org&#39;, ...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：如果数据表没有对应的数据，那么返回值为空对象 {}，可以通过 think.isEmpty 方法来判断返回值是否为空。</p></blockquote><h4 id="查询指定字段"><a href="#查询指定字段" class="headerlink" title="查询指定字段"></a><strong>查询指定字段</strong></h4><p>使用 getField 方法查询指定字段的值。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">获取单个字段的所有列表 </span><br><span class="line">  async listAction()&#123;</span><br><span class="line">    const data &#x3D; await this.model(&#39;user&#39;).getField(&#39;c_id&#39;);</span><br><span class="line">    &#x2F;&#x2F; data &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">指定个数获取单个字段的列表</span><br><span class="line">  async listAction()&#123;</span><br><span class="line">    const data &#x3D; await this.model(&#39;user&#39;).getField(&#39;c_id&#39;, 3);</span><br><span class="line">    &#x2F;&#x2F; data &#x3D; [1, 2, 3]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">获取单个字段的一个值</span><br><span class="line">  async listAction()&#123;</span><br><span class="line">    const data &#x3D; await this.model(&#39;user&#39;).getField(&#39;c_id&#39;, true);</span><br><span class="line">    &#x2F;&#x2F; data &#x3D; 1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">获取多个字段的所有列表</span><br><span class="line">  async listAction()&#123;</span><br><span class="line">    const data &#x3D; await this.model(&#39;user&#39;).getField(&#39;c_id,d_name&#39;);</span><br><span class="line">    &#x2F;&#x2F; data &#x3D; &#123;c_id: [1, 2, 3, 4, 5], d_name: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">获取指定个数的多个字段的所有列表</span><br><span class="line">  async listAction()&#123;</span><br><span class="line">    const data &#x3D; await this.model(&#39;user&#39;).getField(&#39;c_id,d_name&#39;, 3);</span><br><span class="line">    &#x2F;&#x2F; data &#x3D; &#123;c_id: [1, 2, 3], d_name: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">获取多个字段的单一值 </span><br><span class="line">  async listAction()&#123;</span><br><span class="line">    const data &#x3D; await this.model(&#39;user&#39;).getField(&#39;c_id,d_name&#39;, true);</span><br><span class="line">    &#x2F;&#x2F; data &#x3D; &#123;c_id: 1, d_name: &#39;a&#39;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="查询多条数据"><a href="#查询多条数据" class="headerlink" title="查询多条数据"></a><strong>查询多条数据</strong></h4><p>使用 select 方法查询多条数据，返回值为数组。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">async listAction()&#123;</span><br><span class="line">  const model &#x3D; this.model(&#39;user&#39;);</span><br><span class="line">  const data &#x3D; await model.limit(2).select();</span><br><span class="line">  &#x2F;&#x2F; data will returns </span><br><span class="line">  [&#123;name: &#39;test&#39;, email: &#39;test@thinkjs.org&#39;, ...&#125;</span><br><span class="line">  &#123;name: &#39;thinkjs&#39;, email: &#39;admin@thinkjs.org&#39;, ...&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询数据条数"><a href="#查询数据条数" class="headerlink" title="查询数据条数"></a><strong>查询数据条数</strong></h4><p>使用 count 方法来方便查询总条数。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">async listAction()&#123;</span><br><span class="line">  const model &#x3D; this.model(&#39;user&#39;);</span><br><span class="line">  const data &#x3D; await model.count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分页查询数据"><a href="#分页查询数据" class="headerlink" title="分页查询数据"></a><strong>分页查询数据</strong></h4><p>使用 countSelect 方法实现分页查询。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">async listAction()&#123;</span><br><span class="line">  const model &#x3D; this.model(&#39;user&#39;);</span><br><span class="line">  const data &#x3D; await model.page(currentPage, pageSize).countSelect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data: array &#x2F;&#x2F;当前页下的数据列表</span><br><span class="line">    count: number,  &#x2F;&#x2F;总条数</span><br><span class="line">    totalPages: number,  &#x2F;&#x2F;总页数</span><br><span class="line">    pageSize: number,  &#x2F;&#x2F;每页显示的条数</span><br><span class="line">    currentPage: number,  &#x2F;&#x2F;当前页</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;增&quot;&gt;&lt;a href=&quot;#增&quot; class=&quot;headerlink&quot; title=&quot;增&quot;&gt;&lt;/a&gt;增&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;添加单条数据&lt;/strong&gt;&lt;br&gt;使用 add 方法可以添加一条数据，返回值为插入数据的 id。如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;async addAction()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  const model &amp;#x3D; this.model(&amp;#39;user&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  const id &amp;#x3D; await model.add(&amp;#123;name: &amp;#39;xxx&amp;#39;, id: &amp;#39;yyy&amp;#39;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;添加多条数据&quot;&gt;&lt;a href=&quot;#添加多条数据&quot; class=&quot;headerlink&quot; title=&quot;添加多条数据&quot;&gt;&lt;/a&gt;&lt;strong&gt;添加多条数据&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;使用 addMany 方法可以添加多条数据，如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;async addAction()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  const model &amp;#x3D; this.model(&amp;#39;user&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  const insertId &amp;#x3D; await model.addMany(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#123;name: &amp;#39;xxx1&amp;#39;, pwd: &amp;#39;yyy1&amp;#39;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#123;name: &amp;#39;xxx2&amp;#39;, pwd: &amp;#39;yyy2&amp;#39;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; )&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注：addMany添加多条数据时应该插入一个数组&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://shen-yu.gitee.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Thinkjs" scheme="https://shen-yu.gitee.io/tags/Thinkjs/"/>
    
      <category term="数据库操作" scheme="https://shen-yu.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    
      <category term="MySQL" scheme="https://shen-yu.gitee.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>React - 请求数据</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6ogw000bgkvchnd39jsf/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6ogw000bgkvchnd39jsf/</id>
    <published>2019-08-14T16:00:00.000Z</published>
    <updated>2020-02-10T14:50:21.529Z</updated>
    
    <content type="html"><![CDATA[<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>安装axios，这里使用的cnpm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm isntall axios --save</span><br></pre></td></tr></table></figure><p>简单使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">    this.listRender();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">listRender &#x3D; e &#x3D;&gt; &#123;</span><br><span class="line">    const _this &#x3D; this;</span><br><span class="line">    axios.get(&quot;url&quot;).then(res &#x3D;&gt; &#123;</span><br><span class="line">        _this.setState(&#123; data: res.data &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><p>安装 jquery ，引用 $</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm isntall jquery --save</span><br></pre></td></tr></table></figure><p>简单使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import $ from &#39;jquery&#39;;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">        this.listRender();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">listRender &#x3D; e &#x3D;&gt; &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">        url: &quot;url&quot;,</span><br><span class="line">        dataType: &quot;json&quot;,</span><br><span class="line">    &#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">            list: res.data.data,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    this.listRender();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">listRender &#x3D; e &#x3D;&gt; &#123;</span><br><span class="line">    fetch(&quot;url&quot;, &#123;</span><br><span class="line">      method: &quot;GET&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">      .then(res &#x3D;&gt; res.json())</span><br><span class="line">      .then(data &#x3D;&gt; &#123;</span><br><span class="line">        this.setState(&#123; data: data &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h3&gt;&lt;p&gt;安装axios，这里使用的cnpm&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm isntall axios --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简单使用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import axios from &amp;quot;axios&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentDidMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.listRender();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listRender &amp;#x3D; e &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const _this &amp;#x3D; this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    axios.get(&amp;quot;url&amp;quot;).then(res &amp;#x3D;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _this.setState(&amp;#123; data: res.data &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://shen-yu.gitee.io/categories/React/"/>
    
    
      <category term="前端" scheme="https://shen-yu.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="https://shen-yu.gitee.io/tags/ES6/"/>
    
      <category term="数据处理" scheme="https://shen-yu.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vim - 常用命令记录</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6ohg0014gkvcf56u8beb/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6ohg0014gkvcf56u8beb/</id>
    <published>2019-08-13T16:00:00.000Z</published>
    <updated>2020-02-10T14:34:09.785Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vim常用命令记录"><a href="#Vim常用命令记录" class="headerlink" title="Vim常用命令记录"></a>Vim常用命令记录</h3><h4 id="文件的打开与保存"><a href="#文件的打开与保存" class="headerlink" title="文件的打开与保存"></a><strong>文件的打开与保存</strong></h4><blockquote><p>vim filename　　　//打开名为filename的文件<br>    :w               //保存修改至源文件<br>    :wq              //保存修改并退出<br>    :q!              //不保存修改，直接退出<br>    :w filename      //保存修改(选中的部分)至filename(filename为新文件)</p></blockquote><a id="more"></a><h4 id="文件编辑"><a href="#文件编辑" class="headerlink" title="文件编辑"></a><strong>文件编辑</strong></h4><blockquote><p>i    //insert即插入模式，从光标所在位置开始插入，即插入的内容位于原光标所在位置字符之前<br>    I    //从光标所在行的行首开始插入<br>    a    //append即附加模式，从光标所在位置之后附加，即新增内容位于原光标所在位置字符之后<br>    A    //从光标所在行的行末开始附加<br>    o    //在光标所在行的下一行加入新一行<br>    O    //在光标所在行的上一行加入新一行<br>    R    //进入替换模式，屏幕下方会出现Replace提示，此时的输入会直接替换光标所在位置的字符，与Windows下的 0 作用类似，同样通过ESC键返回</p></blockquote><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a><strong>删除操作</strong></h4><blockquote><p>x        //删除光标所在处的字符(其大写形式X为将光标之前的字符删除，相当于Backspace)<br>    dd     　//删除光标所在行的操作(常用)</p></blockquote><h4 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a><strong>撤销操作</strong></h4><blockquote><p>u            //撤销上一次操作<br>    U            //撤销对光标所在行的所有操作<br>    Ctrl+r    　 //重做上一操作</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Vim常用命令记录&quot;&gt;&lt;a href=&quot;#Vim常用命令记录&quot; class=&quot;headerlink&quot; title=&quot;Vim常用命令记录&quot;&gt;&lt;/a&gt;Vim常用命令记录&lt;/h3&gt;&lt;h4 id=&quot;文件的打开与保存&quot;&gt;&lt;a href=&quot;#文件的打开与保存&quot; class=&quot;headerlink&quot; title=&quot;文件的打开与保存&quot;&gt;&lt;/a&gt;&lt;strong&gt;文件的打开与保存&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;vim filename　　　//打开名为filename的文件&lt;br&gt;    :w               //保存修改至源文件&lt;br&gt;    :wq              //保存修改并退出&lt;br&gt;    :q!              //不保存修改，直接退出&lt;br&gt;    :w filename      //保存修改(选中的部分)至filename(filename为新文件)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shen-yu.gitee.io/categories/Ubuntu/"/>
    
    
      <category term="Vim" scheme="https://shen-yu.gitee.io/tags/Vim/"/>
    
      <category term="命令行" scheme="https://shen-yu.gitee.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>React - 双向绑定</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6ogr0006gkvcgvqx7rfm/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6ogr0006gkvcgvqx7rfm/</id>
    <published>2019-08-11T16:00:00.000Z</published>
    <updated>2020-02-07T16:14:20.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ref-的-DOM-操作"><a href="#ref-的-DOM-操作" class="headerlink" title="ref 的 DOM 操作"></a>ref 的 DOM 操作</h2><p>React.js 当中提供了 ref 属性来帮助我们获取已经挂载的元素的 DOM 节点，你可以给某个 JSX 元素加上 ref属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;输入框自动聚焦,按钮绑定搜索</span><br><span class="line">class AutoFocusInput extends Component &#123;</span><br><span class="line">  componentDidMount () &#123;</span><br><span class="line">    this.input.focus()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleClick &#x3D; e &#x3D;&gt; &#123;</span><br><span class="line">        const _post &#x3D;</span><br><span class="line">            &#123;</span><br><span class="line">                search: this.input.value</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;input ref&#x3D;&#123;(input) &#x3D;&gt; this.input &#x3D; input&#125; &#x2F;&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;this.handleClick.bind(this)&#125; &#x2F;&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;AutoFocusInput &#x2F;&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以看到我们给 input 元素加了一个 ref 属性，这个属性值是一个函数。当 input 元素在页面上挂载完成以后，React.js 就会调用这个函数，并且把这个挂载以后的 DOM 节点传给这个函数。在函数中我们把这个 DOM 元素设置为组件实例的一个属性，这样以后我们就可以通过 this.input 获取到这个 DOM 元素。</p><p>然后我们就可以在 componentDidMount 中使用这个 DOM 元素，并且调用 this.input.focus() 的 DOM API。整体就达到了页面加载完成就自动 focus 到输入框的功能（大家可以注意到我们用上了 componentDidMount 这个组件生命周期）。</p><p>我们可以给任意代表 HTML 元素标签加上 ref 从而获取到它 DOM 元素然后调用 DOM API。但是记住一个原则：能不用 ref 就不用。特别是要避免用 ref 来做 React.js 本来就可以帮助你做到的页面自动更新的操作和事件监听。多余的 DOM 操作其实是代码里面的“噪音”，不利于我们理解和维护。</p><p>顺带一提的是，其实可以给组件标签也加上 ref ，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Clock ref&#x3D;&#123;(clock) &#x3D;&gt; this.clock &#x3D; clock&#125; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>这样你获取到的是这个 Clock 组件在 React.js 内部初始化的实例。但这并不是什么常用的做法，而且也并不建议这么做，所以这里就简单提及，有兴趣的朋友可以自己学习探索。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ref-的-DOM-操作&quot;&gt;&lt;a href=&quot;#ref-的-DOM-操作&quot; class=&quot;headerlink&quot; title=&quot;ref 的 DOM 操作&quot;&gt;&lt;/a&gt;ref 的 DOM 操作&lt;/h2&gt;&lt;p&gt;React.js 当中提供了 ref 属性来帮助我们获取已经
      
    
    </summary>
    
    
      <category term="React" scheme="https://shen-yu.gitee.io/categories/React/"/>
    
    
      <category term="DOM 操作" scheme="https://shen-yu.gitee.io/tags/DOM-%E6%93%8D%E4%BD%9C/"/>
    
      <category term="前端" scheme="https://shen-yu.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="https://shen-yu.gitee.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>React - 父子传值</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6ogx000cgkvc8zhj2f0s/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6ogx000cgkvc8zhj2f0s/</id>
    <published>2019-08-10T16:00:00.000Z</published>
    <updated>2020-02-10T09:02:16.175Z</updated>
    
    <content type="html"><![CDATA[<p>在React项目里，父子组件传值是比较常见的，今天学习了一下React的父子组件传值。</p><ul><li>父组件向子组件传值：父通过初始state，子组件通过this.props进行接收就可以了；</li><li>子组件向父组件传值：需要绑定一个事件，然后事件是父组件传递过来的this.props.event来进行值的更替。</li></ul><h2 id="父向子传值："><a href="#父向子传值：" class="headerlink" title="父向子传值："></a>父向子传值：</h2><ul><li>父组件 Comment.js ，子组件 ComentList.js</li><li>父通过初始 state ，子组件通过 props 进行接收就可以了；<a id="more"></a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Comment.js</span><br><span class="line">    </span><br><span class="line">import React from &quot;react&quot;</span><br><span class="line">import ComentList from &quot;.&#x2F;ComentList&quot;</span><br><span class="line">     </span><br><span class="line">class Comment extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state &#x3D; &#123;</span><br><span class="line">            arr:[&quot;123&quot;,]</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">            return (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;ComentList arr&#x3D;&#123;this.state.arr&#125;&gt; </span><br><span class="line">                    &lt;&#x2F;ComentList&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default Comment;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ComentList.js</span><br><span class="line">    </span><br><span class="line">import React from &quot;react&quot;</span><br><span class="line">     </span><br><span class="line">class ComentList extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div className&#x3D;&quot;list&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        this.props.arr.map(item &#x3D;&gt; &#123; </span><br><span class="line">                        &#x2F;&#x2F;这个地方通过 this.props 父组件传过来数据，使用 map循环</span><br><span class="line">                            return (</span><br><span class="line">                                &lt;li key&#x3D;&#123;item&#125;&gt;</span><br><span class="line">                                评论是:&#123;item&#125;</span><br><span class="line">                                &lt;&#x2F;li&gt;</span><br><span class="line">                            )</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;&#x2F;ul&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">export default ComentList;</span><br></pre></td></tr></table></figure><h2 id="子向父传值"><a href="#子向父传值" class="headerlink" title="子向父传值"></a>子向父传值</h2><p>绑定一个事件，然后事件是父组件传递过来的this.props.event来进行值的更替。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Comment.js</span><br><span class="line">    </span><br><span class="line">import React from &quot;react&quot;</span><br><span class="line">import ComentList from &quot;.&#x2F;ComentList&quot;</span><br><span class="line">     </span><br><span class="line">class Comment extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state &#x3D; &#123;</span><br><span class="line">            parentText: &quot;this is parent text&quot;,</span><br><span class="line">            arr: </span><br><span class="line">                [&#123;</span><br><span class="line">                    &quot;userName&quot;: &quot;fangMing&quot;, &quot;text&quot;: &quot;123&quot;, &quot;result&quot;: true</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    &quot;userName&quot;: &quot;zhangSan&quot;, &quot;text&quot;: &quot;345&quot;, &quot;result&quot;: false</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    &quot;userName&quot;: &quot;liSi&quot;, &quot;text&quot;: &quot;567&quot;, &quot;result&quot;: true</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    &quot;userName&quot;: &quot;wangWu&quot;, &quot;text&quot;: &quot;789&quot;, &quot;result&quot;: true</span><br><span class="line">                &#125;,]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    fn(data) &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            parentText: data &#x2F;&#x2F;把父组件中的parentText替换为子组件传递的值</span><br><span class="line">        &#125;,() &#x3D;&gt;&#123;</span><br><span class="line">            console.log(this.state.parentText);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#x2F;&#x2F;通过绑定事件进行值的运算，这个地方一定要记得.bind(this)，</span><br><span class="line">                &lt;ComentList arr&#x3D;&#123;this.state.arr&#125; pfn&#x3D;&#123;this.fn.bind(this)&#125; &#x2F;&gt;</span><br><span class="line">                &lt;p&gt;text is &#123;this.state.parentText&#125;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default Comment;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ComentList.js</span><br><span class="line">import React from &quot;react&quot;</span><br><span class="line">     </span><br><span class="line">class ComentList extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state &#x3D; (&#123;</span><br><span class="line">        childText: &quot;this is child text&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    clickFun(text) &#123;</span><br><span class="line">        this.props.pfn(text)&#x2F;&#x2F;这个地方把值传递给了props的事件当中</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div className&#x3D;&quot;list&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        this.props.arr.map(item &#x3D;&gt; &#123;</span><br><span class="line">                            return (</span><br><span class="line">                                &lt;li key&#x3D;&#123;item.userName&#125;&gt;&#123;item.userName&#125; 评论是:&#123;item.text&#125;&lt;&#x2F;li&gt;</span><br><span class="line">                            )</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;&#x2F;ul&gt;</span><br><span class="line">                &lt;button onClick&#x3D;&#123;this.clickFun.bind(this, this.state.childText)&#125;&gt;click me&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line">export default ComentList;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在React项目里，父子组件传值是比较常见的，今天学习了一下React的父子组件传值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父组件向子组件传值：父通过初始state，子组件通过this.props进行接收就可以了；&lt;/li&gt;
&lt;li&gt;子组件向父组件传值：需要绑定一个事件，然后事件是父组件传递过来的this.props.event来进行值的更替。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;父向子传值：&quot;&gt;&lt;a href=&quot;#父向子传值：&quot; class=&quot;headerlink&quot; title=&quot;父向子传值：&quot;&gt;&lt;/a&gt;父向子传值：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;父组件 Comment.js ，子组件 ComentList.js&lt;/li&gt;
&lt;li&gt;父通过初始 state ，子组件通过 props 进行接收就可以了；
    
    </summary>
    
    
      <category term="React" scheme="https://shen-yu.gitee.io/categories/React/"/>
    
    
      <category term="前端" scheme="https://shen-yu.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="https://shen-yu.gitee.io/tags/ES6/"/>
    
      <category term="数据处理" scheme="https://shen-yu.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>React - 路由跳转</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6oh2000igkvc1kb9g9uy/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6oh2000igkvc1kb9g9uy/</id>
    <published>2019-08-09T16:00:00.000Z</published>
    <updated>2020-02-10T09:02:51.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在一张页面中，我们该如何去实现页面跳转呢</p><p>Router提供了页面跳转渲染的方法，React应用会根据链接地址去决定要渲染的内容。链接地址不再是直接跳转，而是去告诉React，我需要怎么样的内容，让React去条件渲染</p><h3 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h3><p>首先，我们快速创建一个 React-app 应用。 删去src目录下的所有文件，新建 index</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line">    </span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import ReactDOM from &#39;react-dom&#39;;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App&#x2F;&gt;, document.getElementById(&#39;root&#39;));</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; App.js</span><br><span class="line"></span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123;Router&#125; from &#39;react-router-dom&#39;;</span><br><span class="line">import Home from &#39;.&#x2F;Home&#39;;</span><br><span class="line">import Page1 from &#39;.&#x2F;Page1&#39;;</span><br><span class="line">import Page2 from &#39;.&#x2F;Page2&#39;;</span><br><span class="line">import Page3 from &#39;.&#x2F;Page3&#39;;</span><br><span class="line">    </span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;Router &gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;Route path&#x3D;&quot;&#x2F;&quot; component&#x3D;&#123;Home&#125; &#x2F;&gt;</span><br><span class="line">                    &lt;Route path&#x3D;&quot;&#x2F;Page1&quot; component&#x3D;&#123;Page1&#125; &#x2F;&gt;</span><br><span class="line">                    &lt;Route path&#x3D;&quot;&#x2F;Page2&quot; component&#x3D;&#123;Page2&#125; &#x2F;&gt;</span><br><span class="line">                    &lt;Route path&#x3D;&quot;&#x2F;Page3&quot; component&#x3D;&#123;Page3&#125; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;Router&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>依次创建页面组件：Home、Page1、Page2、Page3；同时引入Link进行页面跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Home.js</span><br><span class="line"></span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123; Link &#125; from &#39;react-router-dom&#39;;</span><br><span class="line">    </span><br><span class="line">class Home extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;This is Home!&lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;Link to&#x3D;&quot;&#x2F;Page1&#x2F;&quot; style&#x3D;&#123;&#123;color:&#39;black&#39;&#125;&#125;&gt;</span><br><span class="line">                        &lt;div&gt;点击跳转到Page1&lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;&#x2F;Link&gt;</span><br><span class="line">                    &lt;Link to&#x3D;&quot;&#x2F;Page2&#x2F;&quot; style&#x3D;&#123;&#123;color:&#39;black&#39;&#125;&#125;&gt;</span><br><span class="line">                        &lt;div&gt;点击跳转到Page2&lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;&#x2F;Link&gt;</span><br><span class="line">                    &lt;Link to&#x3D;&quot;&#x2F;Page3&#x2F;&quot; style&#x3D;&#123;&#123;color:&#39;black&#39;&#125;&#125;&gt;</span><br><span class="line">                        &lt;div&gt;点击跳转到Page3&lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;&#x2F;Link&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default Home;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Page1~Page3页面类似，不再赘述</span><br><span class="line">    </span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">class Page1 extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;This is Page1!&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default Page1;</span><br><span class="line">&#x2F;&#x2F; Page1~Page3页面类似，不再赘述</span><br></pre></td></tr></table></figure><h3 id="exact-属性"><a href="#exact-属性" class="headerlink" title="exact 属性"></a>exact 属性</h3><p>可以通过 exact 属性来选择渲染时不默认渲染这个页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route exact path&#x3D;&quot;&#x2F;&quot; component&#x3D;&#123;Home&#125; &#x2F;&gt;</span><br><span class="line">&#x2F;&#x2F; 此时，当在跳转到 Page1 时，即使包含了 path&#x3D;&quot;&#x2F;&quot; ,默认不会渲染 path&#x3D;&quot;&#x2F;&quot; 的组件</span><br></pre></td></tr></table></figure><blockquote><p>点击”点击跳转到Page1”</p></blockquote><p><img src="https://blogimage-1259219507.cos.ap-chengdu.myqcloud.com/page.png" alt="page"></p><p><img src="https://blogimage-1259219507.cos.ap-chengdu.myqcloud.com/route.png" alt="route"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在一张页面中，我们该如何去实现页面跳转呢&lt;/p&gt;
&lt;p&gt;Router提供了页面跳转渲染的方法，React应用会根据链接地址去决定要渲染的内容。链接地址不再是直接跳转，而是去告诉React，我需要怎么样的内容，让React去条件渲染&lt;/p&gt;
&lt;h3 id=&quot;创建页面&quot;&gt;&lt;a href=&quot;#创建页面&quot; class=&quot;headerlink&quot; title=&quot;创建页面&quot;&gt;&lt;/a&gt;创建页面&lt;/h3&gt;&lt;p&gt;首先，我们快速创建一个 React-app 应用。 删去src目录下的所有文件，新建 index&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F; index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import React from &amp;#39;react&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import ReactDOM from &amp;#39;react-dom&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import App from &amp;#39;.&amp;#x2F;App&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReactDOM.render(&amp;lt;App&amp;#x2F;&amp;gt;, document.getElementById(&amp;#39;root&amp;#39;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://shen-yu.gitee.io/categories/React/"/>
    
    
      <category term="前端" scheme="https://shen-yu.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="https://shen-yu.gitee.io/tags/ES6/"/>
    
      <category term="页面交互" scheme="https://shen-yu.gitee.io/tags/%E9%A1%B5%E9%9D%A2%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>Jest - 单元测试及可视化报告</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6ogu0008gkvc45cg7uyo/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6ogu0008gkvc45cg7uyo/</id>
    <published>2019-07-12T12:10:33.000Z</published>
    <updated>2020-02-10T09:10:09.739Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><hr><h4 id="安装-jest"><a href="#安装-jest" class="headerlink" title="安装 jest"></a>安装 jest</h4><blockquote><p>cnpm install –save-dev jest</p></blockquote><h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><blockquote><p>jest -v</p></blockquote><p>确保你的项目已经安装了<strong>版本较新</strong>的 jest 测试框架(随版本更迭有可能产生无法预知的BUG，如：配置属性名变更)</p><p>已完成对 jest 配置文件 <strong>jest.config.js</strong> 的基本配置</p><h3 id="函数测试"><a href="#函数测试" class="headerlink" title="函数测试"></a>函数测试</h3><hr><p>首先要做的事情：What needs to be tested?？</p><p>如果你正在编写 Web 应用，那么一个好的起点就是测试应用的每个页面和每个用户交互。但 Web 应用由单元代码组成，如 <strong>UI 、函数和组件</strong>，分别需要单独进行测试。</p><a id="more"></a><h4 id="函数单元测试"><a href="#函数单元测试" class="headerlink" title="函数单元测试"></a>函数单元测试</h4><p>两种情况：</p><ul><li>你正接手一些函数功能<strong>未知</strong>的代码</li><li>你要实现之前没有的<strong>新功能</strong>,但不知是否实现</li></ul><p>对于这两种情况，你可以通过将<strong>测试</strong>看作检查给定函数是否产生<strong>预期结果</strong>来帮助自己。 以下是典型测试流程的样子：</p><ul><li>导入要测试的函数</li><li>给函数<strong>输入</strong></li><li>定义<strong>期望</strong></li><li>检查是否按<strong>预期</strong>输出</li></ul><p>只需这样执行：输入 → 预期输出 → 断言结果</p><h4 id="书写测试用例"><a href="#书写测试用例" class="headerlink" title="书写测试用例"></a>书写测试用例</h4><p>以下是一个完整的测试用例</p><p>创建 filename.js 文件，描述测试函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; utils.js</span><br><span class="line">export function fixedZero(val) &#123;</span><br><span class="line">  return val * 1 &lt; 10 ? &#96;0$&#123;val&#125;&#96; : val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 filename.test.js 文件,描述断言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; utils.test.js</span><br><span class="line">import &#123; fixedZero &#125; from &#39;.&#x2F;utils&#39;;</span><br><span class="line">...</span><br><span class="line">&#x2F;&#x2F; describe(&#39;函数分组测试描述&#39;,() &#x3D;&gt; &#123;</span><br><span class="line">&#x2F;&#x2F;   test(&#39;单元测试描述&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">&#x2F;&#x2F;       expect(&quot;函数结果&quot;).toEqual(&quot;期望结果&quot;);</span><br><span class="line">&#x2F;&#x2F;   &#125;);    </span><br><span class="line">&#x2F;&#x2F; &#125;)</span><br><span class="line"></span><br><span class="line">describe(&#39;fixedZero tests&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    it(&#39;should not pad large numbers&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">        expect(fixedZero(10)).toEqual(10);</span><br><span class="line">        expect(fixedZero(11)).toEqual(11);</span><br><span class="line">        expect(fixedZero(15)).toEqual(15);</span><br><span class="line">        expect(fixedZero(20)).toEqual(20);</span><br><span class="line">        expect(fixedZero(100)).toEqual(100);</span><br><span class="line">        expect(fixedZero(1000)).toEqual(1000);</span><br><span class="line">        expect(fixedZero(1000)).toEqual(1000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">    it(&#39;should pad single digit numbers and return them as string&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">        expect(fixedZero(0)).toEqual(&#39;00&#39;);</span><br><span class="line">        expect(fixedZero(1)).toEqual(&#39;01&#39;);</span><br><span class="line">        expect(fixedZero(2)).toEqual(&#39;02&#39;);</span><br><span class="line">        expect(fixedZero(3)).toEqual(&#39;03&#39;);</span><br><span class="line">        expect(fixedZero(4)).toEqual(&#39;04&#39;);</span><br><span class="line">        expect(fixedZero(5)).toEqual(&#39;05&#39;);</span><br><span class="line">        expect(fixedZero(6)).toEqual(&#39;06&#39;);</span><br><span class="line">        expect(fixedZero(7)).toEqual(&#39;07&#39;);</span><br><span class="line">        expect(fixedZero(8)).toEqual(&#39;08&#39;);</span><br><span class="line">        expect(fixedZero(9)).toEqual(&#39;09&#39;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在命令行输入npm test utils.test.js，我们可以看到命令台的返回<br><img src="https://blogimage-1259219507.cos.ap-chengdu.myqcloud.com/fenzuceshi.png" alt="ceshi.png"></p><h3 id="实现在浏览器上实现测试结果的可视化显示"><a href="#实现在浏览器上实现测试结果的可视化显示" class="headerlink" title="实现在浏览器上实现测试结果的可视化显示"></a>实现在浏览器上实现测试结果的可视化显示</h3><hr><p>当我们对一些比较庞大的项目，要进行成百上千个函数进行单元测试时，测试结果仅仅显示在控制台明显不够看。如何优雅的让测试结果展示出来，并可以详细的观察测试结果的具体问题呢？</p><p>我们会想到将 jest 的测试结果 –&gt; 存储 –&gt; 发请求(简单服务器) –&gt; 发送到浏览器 –&gt; 展示</p><h4 id="两种方法"><a href="#两种方法" class="headerlink" title="两种方法"></a>两种方法</h4><ul><li>通过 nodejs 实现但是需要配置一个简单的 node 服务器，来实现在浏览器显示。但是方法过于繁琐，不在赘述。</li><li>借助于报告工具 jest-html-report (本质与第一个方法没有区别，只是这个工具是打包好的 node 库，可以直接投入使用)</li></ul><h4 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h4><p>根据 jest 官方文档在 jest.config.js 中有 testResultsProcessor 属性：</p><table><thead><tr><th>Property</th><th align="center">Description</th><th align="center">Type</th><th>Default</th></tr></thead><tbody><tr><td>testResultsProcessor</td><td align="center">This option allows the use of a custom results processor. This processor must be a node module that  exports a function expecting an object with the following structure as the first argument and return it:</td><td align="center">string</td><td>undefined</td></tr></tbody></table><p>这个属性可以允许结果处理程序使用。这个处理器必须是一个输出函数的 node 模块，这个函数的第一个参数会接收测试结果，且必须在最终返回测试结果。可以用与于接收测试结果，且在最终返回测试结果</p><p>首先我们安装它：cnpm install jest-html-report  –save-dev </p><p>在 jest.config.js 中，具体配置 jest-html-reporter 的属性</p><p>用到的属性：</p><table><thead><tr><th align="left">Property</th><th align="center">Description</th><th align="center">Type</th><th align="center">Default</th></tr></thead><tbody><tr><td align="left">pageTitle</td><td align="center">The title of the document</td><td align="center">string</td><td align="center">“Test Suite”</td></tr><tr><td align="left">outputPath</td><td align="center">The path to where the plugin will output the HTML report</td><td align="center">string</td><td align="center">“./test-report.html”</td></tr><tr><td align="left">includeFailureMsg</td><td align="center">If this setting is set to true, this will output the detailed failure message for each failed test.</td><td align="center">boolean</td><td align="center">false</td></tr></tbody></table><p>其他属性参考<strong>官方文档</strong>：<a href="https://github.com/Hargne/jest-html-reporter/wiki/configuration" target="_blank" rel="noopener">https://github.com/Hargne/jest-html-reporter/wiki/configuration</a></p><p>完成 jest.config.js 中 jest-html-reporter 的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;jest.config.js</span><br><span class="line">module.exports&#x3D;&#123;</span><br><span class="line">    ...</span><br><span class="line">    testResultsProcessor:&#39;.&#x2F;testReport&#39;,</span><br><span class="line">    reporters: [</span><br><span class="line">    &#39;default&#39;,</span><br><span class="line">    [</span><br><span class="line">      &#39;.&#x2F;node_modules&#x2F;jest-html-reporter&#39;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F;输出页面标题</span><br><span class="line">        pageTitle: &#39;Test Report&#39;,</span><br><span class="line">        &#x2F;&#x2F;插件将会输出的HTML报告的路径。</span><br><span class="line">        outputPath:&#39;testReport&#x2F;JesttestReport.html&#39;,</span><br><span class="line">        &#x2F;&#x2F;为每个失败的测试输出详细的失败消息。</span><br><span class="line">        includeFailureMsg: true,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次在命令行输入 npm test utils.test.js，我们可以看到测试结果被成功返回在 testReport/JesttestReport.html 中</p><p>我们打开生成的 html 文件，测试结果的可视化就完成啦。<br><img src="https://blogimage-1259219507.cos.ap-chengdu.myqcloud.com/Jesttestreport.png" alt="testreport.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><ul><li>掌握单元测试</li><li>实现自动生成测试报告</li></ul><h3 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h3><hr><ul><li>如何将jest的测试结果转移到页面上：<a href="https://juejin.im/post/5c2c57ba5188257ed57eb471" target="_blank" rel="noopener">https://juejin.im/post/5c2c57ba5188257ed57eb471</a></li><li>关于 jest 测试结果如何在浏览器上显示的问题：<a href="https://blog.csdn.net/weixin_34314962/article/details/88811759" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34314962/article/details/88811759</a></li><li>Jest官方文档：<a href="https://jestjs.io/docs/en/getting-started.html" target="_blank" rel="noopener">https://jestjs.io/docs/en/getting-started.html</a></li><li>jest-html-reporter官方文档：<a href="https://github.com/Hargne/jest-html-reporter/wiki/configuration" target="_blank" rel="noopener">https://github.com/Hargne/jest-html-reporter/wiki/configuration</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;安装-jest&quot;&gt;&lt;a href=&quot;#安装-jest&quot; class=&quot;headerlink&quot; title=&quot;安装 jest&quot;&gt;&lt;/a&gt;安装 jest&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;cnpm install –save-dev jest&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;查看版本&quot;&gt;&lt;a href=&quot;#查看版本&quot; class=&quot;headerlink&quot; title=&quot;查看版本&quot;&gt;&lt;/a&gt;查看版本&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;jest -v&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;确保你的项目已经安装了&lt;strong&gt;版本较新&lt;/strong&gt;的 jest 测试框架(随版本更迭有可能产生无法预知的BUG，如：配置属性名变更)&lt;/p&gt;
&lt;p&gt;已完成对 jest 配置文件 &lt;strong&gt;jest.config.js&lt;/strong&gt; 的基本配置&lt;/p&gt;
&lt;h3 id=&quot;函数测试&quot;&gt;&lt;a href=&quot;#函数测试&quot; class=&quot;headerlink&quot; title=&quot;函数测试&quot;&gt;&lt;/a&gt;函数测试&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;首先要做的事情：What needs to be tested?？&lt;/p&gt;
&lt;p&gt;如果你正在编写 Web 应用，那么一个好的起点就是测试应用的每个页面和每个用户交互。但 Web 应用由单元代码组成，如 &lt;strong&gt;UI 、函数和组件&lt;/strong&gt;，分别需要单独进行测试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="函数测试" scheme="https://shen-yu.gitee.io/categories/%E5%87%BD%E6%95%B0%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="nodejs" scheme="https://shen-yu.gitee.io/tags/nodejs/"/>
    
      <category term="Jest" scheme="https://shen-yu.gitee.io/tags/Jest/"/>
    
  </entry>
  
  <entry>
    <title>滚动条样式设置</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6ogn0003gkvc8qg017a5/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6ogn0003gkvc8qg017a5/</id>
    <published>2019-07-07T16:00:00.000Z</published>
    <updated>2020-02-07T16:31:46.158Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>原生的滚动条样式及其丑陋，如果我们不设置滚动条的样式，影响使用心情</p><h3 id="滚动条样式设置"><a href="#滚动条样式设置" class="headerlink" title="滚动条样式设置"></a>滚动条样式设置</h3><p>在 webkit 内核的浏览器中，可以通过以下css属性去修改滚动条样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar </span><br><span class="line">滚动条整体部分。其中的属性: width,height,background,border等</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-button </span><br><span class="line">滚动条两端的按钮。可以用display:none让其不显示，也可添加背景图片、颜色</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track </span><br><span class="line">外层轨道。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track-piece </span><br><span class="line">内层轨道。具体区别看下面gif图，需要注意的就是它会覆盖第三个属性的样式</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb </span><br><span class="line">滚动条里面可以拖动的那部分</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-corner </span><br><span class="line">边角，两个滚动条交汇处</span><br><span class="line"></span><br><span class="line">::-webkit-resizer </span><br><span class="line">两个滚动条交汇处用于拖动调整元素大小的小控件（基本用不上）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;原生的滚动条样式及其丑陋，如果我们不设置滚动条的样式，影响使用心情&lt;/p&gt;
&lt;h3 id=&quot;滚动条样式设置&quot;&gt;&lt;a href=&quot;#滚动条样式
      
    
    </summary>
    
    
      <category term="前端" scheme="https://shen-yu.gitee.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="https://shen-yu.gitee.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
      <category term="CSS" scheme="https://shen-yu.gitee.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04 安装 MySQL Serve</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6ohe0010gkvcc3nscc5f/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6ohe0010gkvcc3nscc5f/</id>
    <published>2019-07-02T16:00:00.000Z</published>
    <updated>2020-02-07T16:31:34.486Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL是一个免费且广泛使用的开源关系数据库。如果您知道自己需要数据库但对所有可用选项知之甚少，那么这是一个不错的选择。</p><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><blockquote><p>sudo apt-get update<br>sudo apt-get install mysql-server</p></blockquote><h3 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h3><p>安装完成后，您可以通过运行以下命令来启动数据库服务。如果该服务已启动，则会显示一条消息，通知您该服务已在运行：</p><blockquote><p>systemctl start mysql</p></blockquote><h3 id="重启时启动"><a href="#重启时启动" class="headerlink" title="重启时启动"></a>重启时启动</h3><p>要确保在重新引导后启动数据库服务器，请运行以下命令：</p><blockquote><p>systemctl enable mysql</p></blockquote><h3 id="跨权使用mysql"><a href="#跨权使用mysql" class="headerlink" title="跨权使用mysql"></a>跨权使用mysql</h3><blockquote><p>sudo mysql(用于忘记root密码时配置MySQL)</p></blockquote><a id="more"></a><h4 id="添加数据库用户"><a href="#添加数据库用户" class="headerlink" title="添加数据库用户"></a>添加数据库用户</h4><p>当应用程序使用root用户连接到数据库时，它们通常具有超出所需权限的权限。您可以添加应用程序可用于连接到新数据库的用户。</p><p>添加新的用户:</p><blockquote><p>这里以user：yang,password:yang 为例</p></blockquote><p>允许本地IP访问localhost的MySQL数据库</p><figure class="highlight plain"><figcaption><span>mysql;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">show fields from user;</span><br><span class="line">select host,user from user;</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| host      | user             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| localhost | debian-sys-maint |</span><br><span class="line">| localhost | mysql.session    |</span><br><span class="line">| localhost | mysql.sys        |</span><br><span class="line">| localhost | root             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">mysql&gt; create user &#39;yang&#39;@&#39;localhost&#39; identified by &#39;yang&#39;;</span><br><span class="line">select host,user from user;</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| host      | user             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| localhost | debian-sys-maint |</span><br><span class="line">| localhost | mysql.session    |</span><br><span class="line">| localhost | mysql.sys        |</span><br><span class="line">| localhost | root             |</span><br><span class="line">| localhost | yang             |</span><br><span class="line">+-----------+------------------+</span><br></pre></td></tr></table></figure><p>允许外网IP访问数据库,所有的IP都可以访问该数据库</p><blockquote><p>mysql&gt; create user ‘yang’@’%’ identified by ‘yang’;<br>创建完成后，刷新<br>mysql&gt; flush privileges;</p></blockquote><h3 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h3><p>更改用户赋权，并刷新授权</p><blockquote><p>mysql&gt; GRANT ALL PRIVILEGES ON <em>.</em> TO ‘yang’@’%’ IDENTIFIED BY ‘yang’ WITH GRANT OPTION;<br>mysql&gt; flush privileges;</p></blockquote><h4 id="开启外网访问权限、修改端口"><a href="#开启外网访问权限、修改端口" class="headerlink" title="开启外网访问权限、修改端口"></a>开启外网访问权限、修改端口</h4><p>开启MySQL远程访问</p><blockquote><p>sudo ufw allow mysql<br>查看3306端口是否对外开放</p></blockquote><blockquote><p>netstat -an | grep 3306<br>    tcp    0   0 127.0.0.1:3306      0.0.0.0:*         LISTEN<br>如果显示如上，说明mysql端口目前只监听本地连接127.0.0.1。然后需要修改mysql的配置文件</p></blockquote><blockquote><p>cd /etc/mysql/mysql.conf.d<br>    sudo vim mysqld.cnf<br>找到bind-address = 127.0.0.1可以修改端口</p></blockquote><blockquote><p>a 插入模式，注释#<br>    Esc<br>    ：wq保存退出</p></blockquote><p>重启mysql</p><blockquote><p>service mysql restart</p></blockquote><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><p>mysql8.0 版本报错:</p><blockquote><p>  Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client</p></blockquote><p>解决办法（修改加密规则为普通模式，默认是严格加密模式）：</p><blockquote><p>mysql -u root -p<br>进入 mysql 后<br>use mysql<br>ALTER USER ‘root’@’localhost’ IDENTIFIED BY ‘password’ PASSWORD EXPIRE NEVER; (修改加密规则)<br>ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘password’; (更新用户密码)<br>FLUSH PRIVILEGES; #刷新权限  </p></blockquote><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>数据库基本操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">创建数据库</span><br><span class="line">create database dbname charset&#x3D;utf8;</span><br><span class="line">删除数据库</span><br><span class="line">drop database dbname;</span><br><span class="line">切换数据库</span><br><span class="line">use dbname;</span><br><span class="line">查看当前选择的数据库</span><br><span class="line">select database();</span><br><span class="line"></span><br><span class="line">注.　以上dbname 为数据库名称</span><br></pre></td></tr></table></figure><p>表操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">查看当前数据库所有表</span><br><span class="line">show tables;</span><br><span class="line">创建表</span><br><span class="line">create table tablename();</span><br><span class="line">修改表</span><br><span class="line">alter table tablename add|change|drop 列名　类型；</span><br><span class="line">删除表</span><br><span class="line">drop table tablename;</span><br><span class="line">查看表结构</span><br><span class="line">desc tablename;</span><br><span class="line">查询</span><br><span class="line">select * from tablename;</span><br><span class="line">增加</span><br><span class="line">全列插入: insert into tablename values(....);</span><br><span class="line">缺省插入: insert into tablename(列１....) values(值1 .....);</span><br><span class="line">同时插入多条数据　insert into tablename values(....),(.....);</span><br><span class="line">或　insert into tablename(列１...) values(值１...),(值１....);</span><br><span class="line">修改</span><br><span class="line">update tablename set 列1&#x3D;值1 ,... where 条件;</span><br><span class="line">删除</span><br><span class="line">delete from tablename where 条件;</span><br></pre></td></tr></table></figure><p>导入sql脚本文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进入mysql shell</span><br><span class="line">mysql -u root -p</span><br><span class="line">Entry password:</span><br></pre></td></tr></table></figure><p>首先使用 xftp 传输你的 dbname.sql 文件到 Ubuntu</p><p>mysql shell 下执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">创建数据库</span><br><span class="line">create database think charset&#x3D;utf8;</span><br><span class="line">选择数据库</span><br><span class="line">use think;</span><br><span class="line">导入sql</span><br><span class="line">source &#x2F;path&#x2F;path&#x2F;think.sql;</span><br><span class="line"></span><br><span class="line">注： 以数据库think,SQL脚本think.sql为例</span><br></pre></td></tr></table></figure><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p>阿里开源镜像站：<a href="https://opsx.alibaba.com/mirror" target="_blank" rel="noopener">https://opsx.alibaba.com/mirror</a><br>Ubuntu 下开启 mysql 远程访问：<a href="https://www.cnblogs.com/myblog1993/p/10560679.html" target="_blank" rel="noopener">https://www.cnblogs.com/myblog1993/p/10560679.html</a><br>mysql8.0 版本  报错：<a href="https://www.jianshu.com/p/c8eb6d2471f8" target="_blank" rel="noopener">https://www.jianshu.com/p/c8eb6d2471f8</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL是一个免费且广泛使用的开源关系数据库。如果您知道自己需要数据库但对所有可用选项知之甚少，那么这是一个不错的选择。&lt;/p&gt;
&lt;h3 id=&quot;安装MySQL&quot;&gt;&lt;a href=&quot;#安装MySQL&quot; class=&quot;headerlink&quot; title=&quot;安装MySQL&quot;&gt;&lt;/a&gt;安装MySQL&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;sudo apt-get update&lt;br&gt;sudo apt-get install mysql-server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;启动MySQL服务&quot;&gt;&lt;a href=&quot;#启动MySQL服务&quot; class=&quot;headerlink&quot; title=&quot;启动MySQL服务&quot;&gt;&lt;/a&gt;启动MySQL服务&lt;/h3&gt;&lt;p&gt;安装完成后，您可以通过运行以下命令来启动数据库服务。如果该服务已启动，则会显示一条消息，通知您该服务已在运行：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;systemctl start mysql&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;重启时启动&quot;&gt;&lt;a href=&quot;#重启时启动&quot; class=&quot;headerlink&quot; title=&quot;重启时启动&quot;&gt;&lt;/a&gt;重启时启动&lt;/h3&gt;&lt;p&gt;要确保在重新引导后启动数据库服务器，请运行以下命令：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;systemctl enable mysql&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;跨权使用mysql&quot;&gt;&lt;a href=&quot;#跨权使用mysql&quot; class=&quot;headerlink&quot; title=&quot;跨权使用mysql&quot;&gt;&lt;/a&gt;跨权使用mysql&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;sudo mysql(用于忘记root密码时配置MySQL)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shen-yu.gitee.io/categories/Ubuntu/"/>
    
    
      <category term="数据库操作" scheme="https://shen-yu.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    
      <category term="MySQL" scheme="https://shen-yu.gitee.io/tags/MySQL/"/>
    
      <category term="xftp" scheme="https://shen-yu.gitee.io/tags/xftp/"/>
    
  </entry>
  
  <entry>
    <title>about</title>
    <link href="https://shen-yu.gitee.io/2019/ck6gj6oif003pgkvcej3v4b1n/"/>
    <id>https://shen-yu.gitee.io/2019/ck6gj6oif003pgkvcej3v4b1n/</id>
    <published>2019-06-28T12:10:33.000Z</published>
    <updated>2020-02-10T14:23:27.378Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h4><p>一个正在摸爬滚打、努力学习WEB前端的小白程序猿</p><p>西南科技大学 2017 级学生</p><p>本科专业物联网工程，正在学习前端</p><p>大学算是虚度了两年光阴，悔不当初，于是下决心成为一名前端工程师</p><h4 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h4><p>Email：<a href="mailto:790041427@qq.com">790041427@qq.com</a></p><p>Blog：<a href="https://seahaiworld.github.io/blog" target="_blank" rel="noopener">https://seahaiworld.github.io/blog</a></p><p>Gitee：<a href="https://gitee.com/SeaHaiWorld" target="_blank" rel="noopener">https://gitee.com/SeaHaiWorld</a></p><p>Github：<a href="https://github.com/SeaHaiWorld" target="_blank" rel="noopener">https://github.com/SeaHaiWorld</a></p><p>方向：WEB前端，移动端</p><p>爱好：吃饭睡觉打游戏</p><p>目标：WEB前端工程师</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;关于我&quot;&gt;&lt;a href=&quot;#关于我&quot; class=&quot;headerlink&quot; title=&quot;关于我&quot;&gt;&lt;/a&gt;关于我&lt;/h4&gt;&lt;p&gt;一个正在摸爬滚打、努力学习WEB前端的小白程序猿&lt;/p&gt;
&lt;p&gt;西南科技大学 2017 级学生&lt;/p&gt;
&lt;p&gt;本科专业物联网工程，正
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
